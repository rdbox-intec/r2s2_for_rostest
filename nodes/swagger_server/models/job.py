# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util

from swagger_server.models.image import Image
from swagger_server.models.job_simulator_opts import JobSimulatorOpts


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, uid: str=None, mid: int=None, strategy_image: Image=None, strategy_args: List[str]=None, simulator_image: Image=None, simulator_args: List[str]=None, simulator_opts: JobSimulatorOpts=None, namespace: str=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param id: The id of this Job.  # noqa: E501
        :type id: int
        :param uid: The uid of this Job.  # noqa: E501
        :type uid: str
        :param mid: The mid of this Job.  # noqa: E501
        :type mid: int
        :param strategy_image: The strategy_image of this Job.  # noqa: E501
        :type strategy_image: Image
        :param strategy_args: The strategy_args of this Job.  # noqa: E501
        :type strategy_args: List[str]
        :param simulator_image: The simulator_image of this Job.  # noqa: E501
        :type simulator_image: Image
        :param simulator_args: The simulator_args of this Job.  # noqa: E501
        :type simulator_args: List[str]
        :param simulator_opts: The simulator_opts of this Job.  # noqa: E501
        :type simulator_opts: JobSimulatorOpts
        :param namespace: The namespace of this Job.  # noqa: E501
        :type namespace: str
        """
        self.swagger_types = {
            'id': int,
            'uid': str,
            'mid': int,
            'strategy_image': Image,
            'strategy_args': List[str],
            'simulator_image': Image,
            'simulator_args': List[str],
            'simulator_opts': JobSimulatorOpts,
            'namespace': str
        }

        self.attribute_map = {
            'id': 'id',
            'uid': 'uid',
            'mid': 'mid',
            'strategy_image': 'strategy_image',
            'strategy_args': 'strategy_args',
            'simulator_image': 'simulator_image',
            'simulator_args': 'simulator_args',
            'simulator_opts': 'simulator_opts',
            'namespace': 'namespace'
        }

        self._id = id
        self._uid = uid
        self._mid = mid
        self._strategy_image = strategy_image
        self._strategy_args = strategy_args
        self._simulator_image = simulator_image
        self._simulator_args = simulator_args
        self._simulator_opts = simulator_opts
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Job.


        :return: The id of this Job.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Job.


        :param id: The id of this Job.
        :type id: int
        """

        self._id = id

    @property
    def uid(self) -> str:
        """Gets the uid of this Job.


        :return: The uid of this Job.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this Job.


        :param uid: The uid of this Job.
        :type uid: str
        """

        self._uid = uid

    @property
    def mid(self) -> int:
        """Gets the mid of this Job.


        :return: The mid of this Job.
        :rtype: int
        """
        return self._mid

    @mid.setter
    def mid(self, mid: int):
        """Sets the mid of this Job.


        :param mid: The mid of this Job.
        :type mid: int
        """

        self._mid = mid

    @property
    def strategy_image(self) -> Image:
        """Gets the strategy_image of this Job.


        :return: The strategy_image of this Job.
        :rtype: Image
        """
        return self._strategy_image

    @strategy_image.setter
    def strategy_image(self, strategy_image: Image):
        """Sets the strategy_image of this Job.


        :param strategy_image: The strategy_image of this Job.
        :type strategy_image: Image
        """

        self._strategy_image = strategy_image

    @property
    def strategy_args(self) -> List[str]:
        """Gets the strategy_args of this Job.


        :return: The strategy_args of this Job.
        :rtype: List[str]
        """
        return self._strategy_args

    @strategy_args.setter
    def strategy_args(self, strategy_args: List[str]):
        """Sets the strategy_args of this Job.


        :param strategy_args: The strategy_args of this Job.
        :type strategy_args: List[str]
        """

        self._strategy_args = strategy_args

    @property
    def simulator_image(self) -> Image:
        """Gets the simulator_image of this Job.


        :return: The simulator_image of this Job.
        :rtype: Image
        """
        return self._simulator_image

    @simulator_image.setter
    def simulator_image(self, simulator_image: Image):
        """Sets the simulator_image of this Job.


        :param simulator_image: The simulator_image of this Job.
        :type simulator_image: Image
        """

        self._simulator_image = simulator_image

    @property
    def simulator_args(self) -> List[str]:
        """Gets the simulator_args of this Job.


        :return: The simulator_args of this Job.
        :rtype: List[str]
        """
        return self._simulator_args

    @simulator_args.setter
    def simulator_args(self, simulator_args: List[str]):
        """Sets the simulator_args of this Job.


        :param simulator_args: The simulator_args of this Job.
        :type simulator_args: List[str]
        """

        self._simulator_args = simulator_args

    @property
    def simulator_opts(self) -> JobSimulatorOpts:
        """Gets the simulator_opts of this Job.


        :return: The simulator_opts of this Job.
        :rtype: JobSimulatorOpts
        """
        return self._simulator_opts

    @simulator_opts.setter
    def simulator_opts(self, simulator_opts: JobSimulatorOpts):
        """Sets the simulator_opts of this Job.


        :param simulator_opts: The simulator_opts of this Job.
        :type simulator_opts: JobSimulatorOpts
        """

        self._simulator_opts = simulator_opts

    @property
    def namespace(self) -> str:
        """Gets the namespace of this Job.


        :return: The namespace of this Job.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace: str):
        """Sets the namespace of this Job.


        :param namespace: The namespace of this Job.
        :type namespace: str
        """

        self._namespace = namespace
