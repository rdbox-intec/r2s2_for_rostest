# coding: utf-8

"""
    RDBOX Robotics Simulator System

    This is a RDBOX Robotics Simulator System.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info-rdbox@intec.co.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobSimulatorOpts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_no': 'int',
        'screent_no': 'int',
        'vnc_password': 'str',
        'no_vnc_port': 'int'
    }

    attribute_map = {
        'display_no': 'display_no',
        'screent_no': 'screent_no',
        'vnc_password': 'vnc_password',
        'no_vnc_port': 'no_vnc_port'
    }

    def __init__(self, display_no=None, screent_no=None, vnc_password=None, no_vnc_port=None):  # noqa: E501
        """JobSimulatorOpts - a model defined in Swagger"""  # noqa: E501

        self._display_no = None
        self._screent_no = None
        self._vnc_password = None
        self._no_vnc_port = None
        self.discriminator = None

        if display_no is not None:
            self.display_no = display_no
        if screent_no is not None:
            self.screent_no = screent_no
        if vnc_password is not None:
            self.vnc_password = vnc_password
        if no_vnc_port is not None:
            self.no_vnc_port = no_vnc_port

    @property
    def display_no(self):
        """Gets the display_no of this JobSimulatorOpts.  # noqa: E501


        :return: The display_no of this JobSimulatorOpts.  # noqa: E501
        :rtype: int
        """
        return self._display_no

    @display_no.setter
    def display_no(self, display_no):
        """Sets the display_no of this JobSimulatorOpts.


        :param display_no: The display_no of this JobSimulatorOpts.  # noqa: E501
        :type: int
        """

        self._display_no = display_no

    @property
    def screent_no(self):
        """Gets the screent_no of this JobSimulatorOpts.  # noqa: E501


        :return: The screent_no of this JobSimulatorOpts.  # noqa: E501
        :rtype: int
        """
        return self._screent_no

    @screent_no.setter
    def screent_no(self, screent_no):
        """Sets the screent_no of this JobSimulatorOpts.


        :param screent_no: The screent_no of this JobSimulatorOpts.  # noqa: E501
        :type: int
        """

        self._screent_no = screent_no

    @property
    def vnc_password(self):
        """Gets the vnc_password of this JobSimulatorOpts.  # noqa: E501


        :return: The vnc_password of this JobSimulatorOpts.  # noqa: E501
        :rtype: str
        """
        return self._vnc_password

    @vnc_password.setter
    def vnc_password(self, vnc_password):
        """Sets the vnc_password of this JobSimulatorOpts.


        :param vnc_password: The vnc_password of this JobSimulatorOpts.  # noqa: E501
        :type: str
        """

        self._vnc_password = vnc_password

    @property
    def no_vnc_port(self):
        """Gets the no_vnc_port of this JobSimulatorOpts.  # noqa: E501


        :return: The no_vnc_port of this JobSimulatorOpts.  # noqa: E501
        :rtype: int
        """
        return self._no_vnc_port

    @no_vnc_port.setter
    def no_vnc_port(self, no_vnc_port):
        """Sets the no_vnc_port of this JobSimulatorOpts.


        :param no_vnc_port: The no_vnc_port of this JobSimulatorOpts.  # noqa: E501
        :type: int
        """

        self._no_vnc_port = no_vnc_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobSimulatorOpts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSimulatorOpts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
