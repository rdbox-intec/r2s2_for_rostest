# coding: utf-8

"""
    RDBOX Robotics Simulator System

    This is a RDBOX Robotics Simulator System.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info-rdbox@intec.co.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'uid': 'str',
        'mid': 'int',
        'status': 'str',
        'start_time': 'int',
        'end_time': 'int',
        'result': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'id': 'id',
        'uid': 'uid',
        'mid': 'mid',
        'status': 'status',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'result': 'result',
        'namespace': 'namespace'
    }

    def __init__(self, id=None, uid=None, mid=None, status=None, start_time=None, end_time=None, result=None, namespace=None):  # noqa: E501
        """Result - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._uid = None
        self._mid = None
        self._status = None
        self._start_time = None
        self._end_time = None
        self._result = None
        self._namespace = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        if mid is not None:
            self.mid = mid
        if status is not None:
            self.status = status
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if result is not None:
            self.result = result
        if namespace is not None:
            self.namespace = namespace

    @property
    def id(self):
        """Gets the id of this Result.  # noqa: E501


        :return: The id of this Result.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Result.


        :param id: The id of this Result.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uid(self):
        """Gets the uid of this Result.  # noqa: E501


        :return: The uid of this Result.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Result.


        :param uid: The uid of this Result.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def mid(self):
        """Gets the mid of this Result.  # noqa: E501


        :return: The mid of this Result.  # noqa: E501
        :rtype: int
        """
        return self._mid

    @mid.setter
    def mid(self, mid):
        """Sets the mid of this Result.


        :param mid: The mid of this Result.  # noqa: E501
        :type: int
        """

        self._mid = mid

    @property
    def status(self):
        """Gets the status of this Result.  # noqa: E501


        :return: The status of this Result.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Result.


        :param status: The status of this Result.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def start_time(self):
        """Gets the start_time of this Result.  # noqa: E501


        :return: The start_time of this Result.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Result.


        :param start_time: The start_time of this Result.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Result.  # noqa: E501


        :return: The end_time of this Result.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Result.


        :param end_time: The end_time of this Result.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def result(self):
        """Gets the result of this Result.  # noqa: E501


        :return: The result of this Result.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Result.


        :param result: The result of this Result.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def namespace(self):
        """Gets the namespace of this Result.  # noqa: E501


        :return: The namespace of this Result.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Result.


        :param namespace: The namespace of this Result.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Result, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
