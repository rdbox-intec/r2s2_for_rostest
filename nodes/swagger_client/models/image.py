# coding: utf-8

"""
    RDBOX Robotics Simulator System

    This is a RDBOX Robotics Simulator System.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info-rdbox@intec.co.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'registry': 'str',
        'repository': 'str',
        'tag': 'str',
        'pull_policy': 'str',
        'pull_secrets': 'list[str]'
    }

    attribute_map = {
        'registry': 'registry',
        'repository': 'repository',
        'tag': 'tag',
        'pull_policy': 'pull_policy',
        'pull_secrets': 'pull_secrets'
    }

    def __init__(self, registry=None, repository=None, tag=None, pull_policy='IfNotPresent', pull_secrets=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501

        self._registry = None
        self._repository = None
        self._tag = None
        self._pull_policy = None
        self._pull_secrets = None
        self.discriminator = None

        if registry is not None:
            self.registry = registry
        if repository is not None:
            self.repository = repository
        if tag is not None:
            self.tag = tag
        if pull_policy is not None:
            self.pull_policy = pull_policy
        if pull_secrets is not None:
            self.pull_secrets = pull_secrets

    @property
    def registry(self):
        """Gets the registry of this Image.  # noqa: E501


        :return: The registry of this Image.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this Image.


        :param registry: The registry of this Image.  # noqa: E501
        :type: str
        """

        self._registry = registry

    @property
    def repository(self):
        """Gets the repository of this Image.  # noqa: E501


        :return: The repository of this Image.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Image.


        :param repository: The repository of this Image.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def tag(self):
        """Gets the tag of this Image.  # noqa: E501


        :return: The tag of this Image.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Image.


        :param tag: The tag of this Image.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def pull_policy(self):
        """Gets the pull_policy of this Image.  # noqa: E501


        :return: The pull_policy of this Image.  # noqa: E501
        :rtype: str
        """
        return self._pull_policy

    @pull_policy.setter
    def pull_policy(self, pull_policy):
        """Sets the pull_policy of this Image.


        :param pull_policy: The pull_policy of this Image.  # noqa: E501
        :type: str
        """

        self._pull_policy = pull_policy

    @property
    def pull_secrets(self):
        """Gets the pull_secrets of this Image.  # noqa: E501


        :return: The pull_secrets of this Image.  # noqa: E501
        :rtype: list[str]
        """
        return self._pull_secrets

    @pull_secrets.setter
    def pull_secrets(self, pull_secrets):
        """Sets the pull_secrets of this Image.


        :param pull_secrets: The pull_secrets of this Image.  # noqa: E501
        :type: list[str]
        """

        self._pull_secrets = pull_secrets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Image, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
