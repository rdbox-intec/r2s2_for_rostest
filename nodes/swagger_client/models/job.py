# coding: utf-8

"""
    RDBOX Robotics Simulator System

    This is a RDBOX Robotics Simulator System.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info-rdbox@intec.co.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'uid': 'str',
        'mid': 'int',
        'unique_name': 'str',
        'strategy_image': 'Image',
        'strategy_args': 'list[str]',
        'simulator_image': 'Image',
        'simulator_args': 'list[str]',
        'simulator_opts': 'JobSimulatorOpts',
        'namespace': 'str'
    }

    attribute_map = {
        'id': 'id',
        'uid': 'uid',
        'mid': 'mid',
        'unique_name': 'unique_name',
        'strategy_image': 'strategy_image',
        'strategy_args': 'strategy_args',
        'simulator_image': 'simulator_image',
        'simulator_args': 'simulator_args',
        'simulator_opts': 'simulator_opts',
        'namespace': 'namespace'
    }

    def __init__(self, id=None, uid=None, mid=None, unique_name=None, strategy_image=None, strategy_args=None, simulator_image=None, simulator_args=None, simulator_opts=None, namespace=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._uid = None
        self._mid = None
        self._unique_name = None
        self._strategy_image = None
        self._strategy_args = None
        self._simulator_image = None
        self._simulator_args = None
        self._simulator_opts = None
        self._namespace = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        if mid is not None:
            self.mid = mid
        if unique_name is not None:
            self.unique_name = unique_name
        if strategy_image is not None:
            self.strategy_image = strategy_image
        if strategy_args is not None:
            self.strategy_args = strategy_args
        if simulator_image is not None:
            self.simulator_image = simulator_image
        if simulator_args is not None:
            self.simulator_args = simulator_args
        if simulator_opts is not None:
            self.simulator_opts = simulator_opts
        if namespace is not None:
            self.namespace = namespace

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uid(self):
        """Gets the uid of this Job.  # noqa: E501


        :return: The uid of this Job.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Job.


        :param uid: The uid of this Job.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def mid(self):
        """Gets the mid of this Job.  # noqa: E501


        :return: The mid of this Job.  # noqa: E501
        :rtype: int
        """
        return self._mid

    @mid.setter
    def mid(self, mid):
        """Sets the mid of this Job.


        :param mid: The mid of this Job.  # noqa: E501
        :type: int
        """

        self._mid = mid

    @property
    def unique_name(self):
        """Gets the unique_name of this Job.  # noqa: E501


        :return: The unique_name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this Job.


        :param unique_name: The unique_name of this Job.  # noqa: E501
        :type: str
        """

        self._unique_name = unique_name

    @property
    def strategy_image(self):
        """Gets the strategy_image of this Job.  # noqa: E501


        :return: The strategy_image of this Job.  # noqa: E501
        :rtype: Image
        """
        return self._strategy_image

    @strategy_image.setter
    def strategy_image(self, strategy_image):
        """Sets the strategy_image of this Job.


        :param strategy_image: The strategy_image of this Job.  # noqa: E501
        :type: Image
        """

        self._strategy_image = strategy_image

    @property
    def strategy_args(self):
        """Gets the strategy_args of this Job.  # noqa: E501


        :return: The strategy_args of this Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._strategy_args

    @strategy_args.setter
    def strategy_args(self, strategy_args):
        """Sets the strategy_args of this Job.


        :param strategy_args: The strategy_args of this Job.  # noqa: E501
        :type: list[str]
        """

        self._strategy_args = strategy_args

    @property
    def simulator_image(self):
        """Gets the simulator_image of this Job.  # noqa: E501


        :return: The simulator_image of this Job.  # noqa: E501
        :rtype: Image
        """
        return self._simulator_image

    @simulator_image.setter
    def simulator_image(self, simulator_image):
        """Sets the simulator_image of this Job.


        :param simulator_image: The simulator_image of this Job.  # noqa: E501
        :type: Image
        """

        self._simulator_image = simulator_image

    @property
    def simulator_args(self):
        """Gets the simulator_args of this Job.  # noqa: E501


        :return: The simulator_args of this Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._simulator_args

    @simulator_args.setter
    def simulator_args(self, simulator_args):
        """Sets the simulator_args of this Job.


        :param simulator_args: The simulator_args of this Job.  # noqa: E501
        :type: list[str]
        """

        self._simulator_args = simulator_args

    @property
    def simulator_opts(self):
        """Gets the simulator_opts of this Job.  # noqa: E501


        :return: The simulator_opts of this Job.  # noqa: E501
        :rtype: JobSimulatorOpts
        """
        return self._simulator_opts

    @simulator_opts.setter
    def simulator_opts(self, simulator_opts):
        """Sets the simulator_opts of this Job.


        :param simulator_opts: The simulator_opts of this Job.  # noqa: E501
        :type: JobSimulatorOpts
        """

        self._simulator_opts = simulator_opts

    @property
    def namespace(self):
        """Gets the namespace of this Job.  # noqa: E501


        :return: The namespace of this Job.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Job.


        :param namespace: The namespace of this Job.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
